#!/usr/bin/env python3
"""
Test-Script zur Verifizierung des eigentlichen Ziels:
- Kann ich aus einer vereinfachten YAML eine funktionierende WordPress XML generieren?
- Kann ich Inhalte in der YAML √§ndern und diese √Ñnderungen erscheinen auf der Website?
"""

import os
import subprocess
import json
import yaml
import time
from pathlib import Path
import xml.etree.ElementTree as ET

class YAMLToXMLGoalVerifier:
    def __init__(self):
        self.working_dir = Path("/Users/holgerbrandt/dev/claude-code/projects/riman-wordpress/riman-wordpress-cholot/wordpress")
        self.test_yaml = self.working_dir / "test-editable-cholot.yaml"
        self.test_xml = self.working_dir / "test-generated-cholot.xml"
        self.tests_passed = []
        self.tests_failed = []
        
    def create_simple_yaml(self):
        """Schritt 1: Erstelle eine vereinfachte, editierbare YAML"""
        print("\nüîß SCHRITT 1: Erstelle vereinfachte YAML-Config...")
        
        yaml_config = {
            'site': {
                'title': 'TEST Cholot Site - Editierbar',
                'url': 'http://localhost:8081',
                'description': 'Test ob ich Inhalte √§ndern kann'
            },
            'pages': [
                {
                    'id': 100,
                    'title': 'TEST Home - Ge√§ndert',
                    'slug': 'test-home',
                    'template': 'elementor_canvas',
                    'sections': [
                        {
                            'type': 'hero',
                            'content': {
                                'title': 'GE√ÑNDERTER TITEL - Test 123',
                                'subtitle': 'Dies sollte auf der Website erscheinen',
                                'button_text': 'NEUER BUTTON TEXT',
                                'background': 'default.jpg'
                            }
                        },
                        {
                            'type': 'text-block',
                            'content': {
                                'heading': 'Editierbarer Textblock',
                                'text': 'Wenn dieser Text auf der Website erscheint, funktioniert die YAML‚ÜíXML Pipeline!'
                            }
                        }
                    ]
                }
            ]
        }
        
        with open(self.test_yaml, 'w', encoding='utf-8') as f:
            yaml.dump(yaml_config, f, default_flow_style=False, allow_unicode=True)
        
        if self.test_yaml.exists():
            print(f"‚úÖ YAML erstellt: {self.test_yaml}")
            self.tests_passed.append("YAML-Erstellung")
            return True
        else:
            print("‚ùå YAML-Erstellung fehlgeschlagen")
            self.tests_failed.append("YAML-Erstellung")
            return False
    
    def generate_xml_from_yaml(self):
        """Schritt 2: Generiere XML aus der YAML"""
        print("\nüìù SCHRITT 2: Generiere XML aus YAML...")
        
        # Pr√ºfe ob Generator existiert
        generator = self.working_dir / "full_site_generator.py"
        if not generator.exists():
            print(f"‚ùå Generator nicht gefunden: {generator}")
            self.tests_failed.append("Generator-Existenz")
            return False
        
        # F√ºhre Generator aus
        result = subprocess.run(
            ['python3', str(generator), str(self.test_yaml), str(self.test_xml)],
            capture_output=True,
            text=True,
            cwd=str(self.working_dir)
        )
        
        if result.returncode != 0:
            print(f"‚ùå Generator-Fehler: {result.stderr[:500]}")
            self.tests_failed.append("XML-Generierung")
            return False
        
        if self.test_xml.exists():
            size = self.test_xml.stat().st_size
            print(f"‚úÖ XML generiert: {self.test_xml} ({size} bytes)")
            self.tests_passed.append("XML-Generierung")
            return True
        else:
            print("‚ùå XML-Datei wurde nicht erstellt")
            self.tests_failed.append("XML-Generierung")
            return False
    
    def verify_xml_content(self):
        """Schritt 3: Verifiziere dass unsere √Ñnderungen in der XML sind"""
        print("\nüîç SCHRITT 3: Verifiziere XML-Inhalt...")
        
        try:
            tree = ET.parse(str(self.test_xml))
            root = tree.getroot()
            
            # Suche nach unseren ge√§nderten Texten
            xml_content = ET.tostring(root, encoding='unicode')
            
            test_strings = [
                'TEST Home - Ge√§ndert',
                'GE√ÑNDERTER TITEL - Test 123',
                'Dies sollte auf der Website erscheinen',
                'NEUER BUTTON TEXT',
                'Editierbarer Textblock'
            ]
            
            found = []
            missing = []
            
            for test_str in test_strings:
                if test_str in xml_content:
                    found.append(test_str)
                    print(f"  ‚úÖ Gefunden: '{test_str}'")
                else:
                    missing.append(test_str)
                    print(f"  ‚ùå Fehlt: '{test_str}'")
            
            if len(found) >= 3:  # Mindestens 3 von 5 sollten da sein
                print(f"‚úÖ XML enth√§lt {len(found)}/5 ge√§nderte Texte")
                self.tests_passed.append("XML-Inhalte")
                return True
            else:
                print(f"‚ùå Nur {len(found)}/5 Texte gefunden")
                self.tests_failed.append("XML-Inhalte")
                return False
                
        except Exception as e:
            print(f"‚ùå XML-Parse-Fehler: {e}")
            self.tests_failed.append("XML-Parsing")
            return False
    
    def test_import_capability(self):
        """Schritt 4: Teste ob die XML importierbar ist"""
        print("\nüì• SCHRITT 4: Teste Import-F√§higkeit...")
        
        # Pr√ºfe XML-Struktur
        try:
            tree = ET.parse(str(self.test_xml))
            root = tree.getroot()
            
            # Z√§hle Items
            items = root.findall('.//item')
            print(f"  Items in XML: {len(items)}")
            
            # Pr√ºfe auf Elementor-Daten
            elementor_found = False
            for item in items:
                for meta in item.findall('.//{http://wordpress.org/export/1.2/}postmeta'):
                    key = meta.find('.//{http://wordpress.org/export/1.2/}meta_key')
                    if key is not None and key.text == '_elementor_data':
                        elementor_found = True
                        break
            
            if elementor_found:
                print("  ‚úÖ Elementor-Daten gefunden")
                self.tests_passed.append("Elementor-Daten")
            else:
                print("  ‚ùå Keine Elementor-Daten gefunden")
                self.tests_failed.append("Elementor-Daten")
            
            # Pr√ºfe WordPress-Format
            if 'wordpress.org/export' in ET.tostring(root, encoding='unicode'):
                print("  ‚úÖ WordPress WXR-Format erkannt")
                self.tests_passed.append("WXR-Format")
                return True
            else:
                print("  ‚ùå Kein g√ºltiges WordPress-Format")
                self.tests_failed.append("WXR-Format")
                return False
                
        except Exception as e:
            print(f"‚ùå Import-Test-Fehler: {e}")
            self.tests_failed.append("Import-Test")
            return False
    
    def check_current_pipeline_status(self):
        """Pr√ºfe den aktuellen Status der YAML‚ÜíXML Pipeline"""
        print("\nüìä AKTUELLER PIPELINE-STATUS:")
        
        # Pr√ºfe verf√ºgbare Dateien
        files_to_check = [
            'full_site_generator.py',
            'cholot-minimal.yaml',
            'cholot-complete.yaml',
            'elementor_structures/page_6_Home.json',
            'test-ocdi-import.php'
        ]
        
        available = []
        missing = []
        
        for file in files_to_check:
            path = self.working_dir / file
            if path.exists():
                available.append(file)
            else:
                missing.append(file)
        
        print(f"\n  Verf√ºgbare Komponenten ({len(available)}):")
        for f in available[:5]:
            print(f"    ‚úÖ {f}")
        
        if missing:
            print(f"\n  Fehlende Komponenten ({len(missing)}):")
            for f in missing[:5]:
                print(f"    ‚ùå {f}")
        
        return len(available) > len(missing)
    
    def generate_report(self):
        """Erstelle einen finalen Report"""
        print("\n" + "="*60)
        print("üìã FINALER TEST-REPORT")
        print("="*60)
        
        print(f"\n‚úÖ Bestandene Tests ({len(self.tests_passed)}):")
        for test in self.tests_passed:
            print(f"  ‚Ä¢ {test}")
        
        if self.tests_failed:
            print(f"\n‚ùå Fehlgeschlagene Tests ({len(self.tests_failed)}):")
            for test in self.tests_failed:
                print(f"  ‚Ä¢ {test}")
        
        # Berechne Erfolgsrate
        total_tests = len(self.tests_passed) + len(self.tests_failed)
        if total_tests > 0:
            success_rate = (len(self.tests_passed) / total_tests) * 100
            print(f"\nüìä Erfolgsrate: {success_rate:.1f}%")
            
            if success_rate >= 80:
                print("\n‚úÖ ZIEL ERREICHT: YAML‚ÜíXML Pipeline funktioniert!")
                print("   Sie k√∂nnen Inhalte in der YAML √§ndern und neue XMLs generieren.")
            elif success_rate >= 50:
                print("\n‚ö†Ô∏è  TEILWEISE ERREICHT: Pipeline funktioniert mit Einschr√§nkungen.")
                print("   Elementor-Integration ben√∂tigt noch Arbeit.")
            else:
                print("\n‚ùå ZIEL NICHT ERREICHT: Pipeline ist noch nicht funktionsf√§hig.")
                print("   Grundlegende Komponenten m√ºssen repariert werden.")
        
        # Empfehlungen
        print("\nüîß N√ÑCHSTE SCHRITTE:")
        if "Elementor-Daten" in self.tests_failed:
            print("  1. Elementor-Daten-Integration in full_site_generator.py fixen")
            print("  2. JSON-Template-Mapping f√ºr Sections implementieren")
        if "XML-Inhalte" in self.tests_failed:
            print("  3. Content-Replacement-Logik in Generator einbauen")
        print("  4. End-to-End Test mit WordPress-Import durchf√ºhren")
        
        return success_rate if total_tests > 0 else 0
    
    def run_full_test(self):
        """F√ºhre alle Tests durch"""
        print("\n" + "="*60)
        print("üöÄ STARTE VERIFIZIERUNG DES YAML‚ÜíXML ZIELS")
        print("="*60)
        
        # Pipeline-Status
        self.check_current_pipeline_status()
        
        # Haupttests
        if self.create_simple_yaml():
            if self.generate_xml_from_yaml():
                self.verify_xml_content()
                self.test_import_capability()
        
        # Report
        success_rate = self.generate_report()
        
        # Speichere Report
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'success_rate': success_rate,
            'tests_passed': self.tests_passed,
            'tests_failed': self.tests_failed,
            'goal_achieved': success_rate >= 80
        }
        
        with open(self.working_dir / 'yaml-xml-goal-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        return success_rate >= 80

if __name__ == "__main__":
    verifier = YAMLToXMLGoalVerifier()
    success = verifier.run_full_test()
    
    print("\n" + "="*60)
    if success:
        print("üéâ ERFOLG: Das Ziel wurde erreicht!")
        print("Sie k√∂nnen nun Inhalte in YAML-Dateien editieren")
        print("und daraus funktionierende WordPress-XMLs generieren!")
    else:
        print("‚ö†Ô∏è  Das Ziel wurde noch nicht vollst√§ndig erreicht.")
        print("Weitere Entwicklung an der Pipeline ist erforderlich.")
    print("="*60)